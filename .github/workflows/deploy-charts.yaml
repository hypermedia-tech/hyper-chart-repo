name: Release Charts

on:
  push:
    branches:
      - main
    paths:
      - charts/**

jobs:
  release:
    permissions:
      contents: write
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v3
        with:
          fetch-depth: 0

      - name: Configure Git
        run: |
          git config user.name "github-actions[bot]"
          git config user.email "github-actions[bot]@users.noreply.github.com"

      - name: Install Helm
        uses: azure/setup-helm@v3
        with:
          version: v3.8.2

      - name: add repos
        run: |
          helm repo add argo https://argoproj.github.io/argo-helm
          helm repo add cert-manager  https://charts.jetstack.io
          helm repo add argo-workflows https://argoproj.github.io/argo-helm
          helm repo add crossplane  https://charts.crossplane.io/stable
          helm repo add komoplane https://helm-charts.komodor.io
          helm repo add dynamodb https://keyporttech.github.io/helm-charts/
          helm repo add jaeger https://jaegertracing.github.io/helm-charts
          helm repo add k6-operator https://grafana.github.io/helm-charts
          helm repo add kiali-operator "https://kiali.org/helm-charts"
          helm repo add minio https://operator.min.io
          helm repo add ngrok-operator https://charts.ngrok.com
          helm repo add pihole https://mojo2600.github.io/pihole-kubernetes
          helm repo add postgres https://charts.bitnami.com/bitnami
          helm repo add pgadmin4 https://helm.runix.net
          helm repo add kube-prometheus-stack https://prometheus-community.github.io/helm-charts
          helm repo update

      - name: Set up chart-testing
        uses: helm/chart-testing-action@v2.7.0

      - name: Identify changed charts
        id: list-changed
        run: |
          set -euxo pipefail # Exit immediately if a command exits with a non-zero status.
                             # Exit if a command in a pipeline fails.
                             # Treat unset variables as an error.

          echo "Running ct list-changed..."
          # Capture the output of ct list-changed.
          # ct list-changed can sometimes exit with 1 if no changes are found,
          # but we want to capture its stdout regardless.
          # We'll redirect stderr to /dev/null to avoid noisy output if it's just "no changes".
          # And use || true to prevent the script from failing if ct list-changed exits with 1.
          ct_output_file="ct_list_changed_output.txt"
          ct list-changed 2>/dev/null | tee "$ct_output_file" || true

          changed_list=$(cat "$ct_output_file")
          echo "Raw output from ct list-changed:"
          echo "---START CT OUTPUT---"
          echo "$changed_list"
          echo "---END CT OUTPUT---"

          if [ -n "$changed_list" ]; then
            echo "Charts were detected as changed."
            echo "changed=true" >> $GITHUB_OUTPUT
            echo "changed_charts=$changed_list" >> $GITHUB_OUTPUT
          else
            echo "No charts detected as changed by ct list-changed."
            echo "changed=false" >> $GITHUB_OUTPUT
            echo "changed_charts=''" >> $GITHUB_OUTPUT
          fi
        shell: bash # Explicitly set shell for clarity

      - name: Bump versions of changed charts
        if: steps.list-changed.outputs.changed == 'true'
        run: |
          # This step works because 'yq' and 'awk' are pre-installed on GitHub-hosted runners.
          # No extra installation step is needed.
          echo "Bumping versions for the following charts:"
          echo "${{ steps.list-changed.outputs.changed_charts }}"

          for chart in ${{ steps.list-changed.outputs.changed_charts }}; do
            chart_dir="charts/$chart"
            echo "--> Bumping version for '$chart_dir'..."
            current_version=$(yq e '.version' "$chart_dir/Chart.yaml")
            # Increment the patch version (e.g., 1.0.7 -> 1.0.8)
            new_version=$(echo "$current_version" | awk -F. -v OFS=. '{$NF++;print}')
            echo "    ($current_version -> $new_version)"
            # Update the Chart.yaml file in place with the new version
            yq -i ".version = \"$new_version\"" "$chart_dir/Chart.yaml"
          done

      - name: Commit and Push Version Bumps
        if: steps.list-changed.outputs.changed == 'true'
        run: |
          git add charts/**/Chart.yaml
          # Check if there are any changes to commit to avoid empty commits
          if ! git diff --staged --quiet; then
            echo "Committing and pushing version bumps..."
            # The [skip ci] in the commit message is crucial to prevent an infinite loop of workflows.
            git commit -m "ci: bump chart versions for release [skip ci]"
            git push
          else
            echo "No version bumps to commit. Chart versions may have been manually updated."
          fi

      - name: Run chart-releaser
        uses: stecky/yet-another-chart-releaser-action@v1
        env:
          YACR_TOKEN: "${{ secrets.GITHUB_TOKEN }}"